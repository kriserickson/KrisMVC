<?php


require(__DIR__ . '/ClassCategoryTest.php');

/**
 * Test class for KrisDBView.
 * Generated by PHPUnit on 2011-06-27 at 23:03:18.
 */
class KrisDBViewTest extends PHPUnit_Framework_TestCase
{

    /**
     * @test
     */
    public function testRetrieve1()
    {
        $sql = 'SELECT ca.category_id,ca.name,ca.image,ca.code,ca.short_description FROM category ca  '.
            'INNER JOIN class cl  ON (cl.category_id = ca.category_id OR cl.sub_category_id = ca.category_id) WHERE ca.category_id = ? LIMIT 1';
        $where = 'ca.category_id = ?';
        $category_id = 9;
        $name = 'South Asian Dance';
        $image = 'south_east.jpg';
        $code = 'south_asian';
        $short_description = 'Bharatanatyam, Bollywood and more!';

        $PDOMock = $this->getMock('MockPDO', array('prepare'), array(), '', false);
        $stmtMock = $this->getMock('PDOStatement', array('execute', 'errorCode', 'fetch'));

        $PDOMock->expects($this->once())->method('prepare')->with($sql)->will($this->returnValue($stmtMock));

        $stmtMock->expects($this->once())->method('execute')->with(array($category_id));
        $stmtMock->expects($this->once())->method('errorCode')->will($this->returnValue(0));
        $stmtMock->expects($this->once())->method('fetch')->with(PDO::FETCH_ASSOC)->will($this->returnValue(array('category_id' => $category_id,
            'name' => $name, 'image' => $image, 'code' => $code, 'short_description' => $short_description)));

        $dbViewMock = $this->getMock('ClassCategoryTest', array('getDatabaseHandle'));



        $dbViewMock->expects($this->once())->method('getDatabaseHandle')->will($this->returnValue($PDOMock));

        /** @var $dbViewMock ClassCategory */

        $dbViewMock->retrieveOne($where, array($category_id));
        $this->assertEquals($category_id, $dbViewMock->CategoryId);
        $this->assertEquals($name, $dbViewMock->Name);
        $this->assertEquals($image, $dbViewMock->Image);
        $this->assertEquals($code, $dbViewMock->Code);
        $this->assertEquals($short_description, $dbViewMock->ShortDescription);

    }

    public function testErrorHandling()
    {
        $PDOMock = $this->getMock('MockPDO', array('prepare'), array(), '', false);
        $stmtMock = $this->getMock('PDOStatement', array('errorCode', 'errorInfo'));

        $PDOMock->expects($this->once())->method('prepare')->will($this->returnValue($stmtMock));

        $info = array('HY000', 1, 'near "bogus": syntax error');

        $stmtMock->expects($this->once())->method('errorCode')->will($this->returnValue(1));
        $stmtMock->expects($this->once())->method('errorInfo')->will($this->returnValue($info));



        $dbViewMock = $this->getMock('ClassCategoryTest', array('getDatabaseHandle'));

        $dbViewMock->expects($this->once())->method('getDatabaseHandle')->will($this->returnValue($PDOMock));

        $this->setExpectedException('DatabaseException', 'Invalid SQL error: ' . $info[0] . ' - ' . $info[1] . ' -- ' . $info[2]);

        $dbViewMock->retrieveOne('', array(0));
        
    }
}
?>
